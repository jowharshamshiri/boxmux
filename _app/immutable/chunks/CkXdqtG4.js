import"./DsnmJJEf.js";import"./8zndd0xi.js";import{f as i,b as n,n as r}from"./E9AOERj2.js";const t={title:"Features",description:"Overview of BoxMux capabilities for building terminal user interfaces"},{title:u,description:d}=t;var s=i("<h2>Core Framework Features</h2> <h3>YAML Configuration System</h3> <ul><li><strong>Interface Design</strong>: Define terminal layouts using YAML configuration files</li> <li><strong>Nested Box Hierarchy</strong>: Create layouts with parent-child box relationships and automatic bounds calculation</li> <li><strong>Multi-Layout Support</strong>: Switch between different layouts dynamically with root/active layout management</li> <li><strong>Schema Validation</strong>: Built-in JSON schema validation ensures configuration correctness</li> <li><strong>Live Configuration Updates</strong>: Modify YAML files and see changes reflected in real-time</li></ul> <h3>Interactive Box Components</h3> <ul><li><strong>Flexible Positioning</strong>: Percentage-based and absolute positioning with anchor system support (TopLeft, Center, etc.)</li> <li><strong>Dynamic Resizing</strong>: Interactive box resizing with mouse drag support and automatic YAML persistence</li> <li><strong>Border Styling</strong>: Customizable borders with 16 ANSI colors and bright variants</li> <li><strong>Focus Management</strong>: Tab order navigation with configurable focus chains</li> <li><strong>Overflow Handling</strong>: Multiple overflow behaviors including scroll, wrap, fill, and cross_out modes</li></ul> <h2>Script Execution & Automation</h2> <h3>Real-time Script Execution</h3> <ul><li><strong>Background Threading</strong>: Execute shell scripts in dedicated threads with configurable refresh intervals</li> <li><strong>Live Output Streaming</strong>: Stream script output incrementally as it’s generated</li> <li><strong>Output Redirection</strong>: Route script output between different boxes with <code>redirect_output</code> and <code>append_output</code></li> <li><strong>Error Handling</strong>: Graceful handling of script failures with visual error state indication</li> <li><strong>Library Support</strong>: Include external script libraries with the <code>libs</code> field</li></ul> <h3>Execution Features</h3> <ul><li><strong>Choice-based Actions</strong>: Execute scripts from interactive menu selections</li> <li><strong>Hot Key Actions</strong>: Global keyboard shortcuts to trigger actions</li> <li><strong>Conditional Execution</strong>: Script execution based on system state and environment variables</li> <li><strong>Multi-threaded Processing</strong>: Concurrent script execution across multiple boxes</li></ul> <h2>PTY (Pseudo-Terminal) Integration</h2> <h3>Interactive Terminal Support</h3> <ul><li><strong>PTY Integration</strong>: Run interactive programs like vim, htop, SSH, and bash sessions</li> <li><strong>ANSI Processing</strong>: ANSI escape sequence handling with color support and cursor management</li> <li><strong>Input Routing</strong>: Direct keyboard input to focused PTY processes with special key support</li> <li><strong>Process Management</strong>: Process lifecycle control including spawn, kill, and restart operations</li></ul> <h3>PTY Features</h3> <ul><li><strong>Scrollback Buffer</strong>: Circular buffer storage for PTY output with configurable capacity (default 10,000 lines)</li> <li><strong>Error Recovery</strong>: Fallback system that avoids problematic PTY usage after failures</li> <li><strong>Visual Indicators</strong>: Lightning bolt (⚡) prefix and color-coded borders for PTY-enabled boxes</li> <li><strong>Process Information</strong>: Display of running process details in box titles</li></ul> <h2>Socket API & Remote Control</h2> <h3>Unix Socket Server</h3> <ul><li><strong>Remote Control Interface</strong>: Control BoxMux applications via Unix socket commands</li> <li><strong>CLI</strong>: Command-line interface for socket operations</li> <li><strong>Real-time Updates</strong>: Update box content, scripts, and configurations remotely</li> <li><strong>Layout Management</strong>: Switch layouts and manage box hierarchies via socket commands</li></ul> <h3>Socket API Operations</h3> <ul><li><strong>Content Management</strong>: <code>replace-box-content</code>, <code>replace-box-script</code> commands</li> <li><strong>Box Management</strong>: <code>add-box</code>, <code>remove-box</code>, <code>replace-box</code> operations</li> <li><strong>PTY Control</strong>: <code>spawn-pty</code>, <code>kill-pty</code>, <code>restart-pty</code>, <code>send-pty-input</code> commands</li> <li><strong>Process Monitoring</strong>: <code>query-pty-status</code> for detailed process information</li> <li><strong>Refresh Control</strong>: <code>start-box-refresh</code>, <code>stop-box-refresh</code> commands</li> <li><strong>Stream Control</strong>: <code>close-stream</code>, <code>switch-stream</code>, <code>list-streams</code> commands</li></ul> <h2>User Interface & Interaction</h2> <h3>Mouse Support</h3> <ul><li><strong>Click Interactions</strong>: Click to select boxes, activate menu items, and trigger actions</li> <li><strong>Scrollbar Controls</strong>: Interactive scrollbars with click-to-jump and drag-to-scroll support</li> <li><strong>Border Dragging</strong>: Resize boxes interactively by dragging borders with real-time feedback</li> <li><strong>Dynamic Cursor Styles</strong>: Context-sensitive cursor shapes for different interactive elements</li> <li><strong>Performance Optimized</strong>: Message coalescing and 60 FPS throttling for smooth drag operations</li></ul> <h3>Keyboard Navigation</h3> <ul><li><strong>Key Support</strong>: Arrow keys, page up/down, home/end with modifier key combinations</li> <li><strong>Focus Chain Navigation</strong>: Tab/Shift+Tab navigation through focusable elements</li> <li><strong>Special Key Handling</strong>: F1-F24, Ctrl/Alt/Shift combinations for PTY applications</li> <li><strong>Global Shortcuts</strong>: Configurable application-level key bindings</li> <li><strong>Platform-specific Support</strong>: Key handling for macOS (Cmd) and Linux/Windows (Ctrl)</li></ul> <h2>Data Visualization & Content</h2> <h3>Content Types</h3> <ul><li><strong>Table System</strong>: CSV/JSON data parsing with sorting, filtering, and pagination support</li> <li><strong>Chart Library</strong>: Unicode-based charts including bar, line, and histogram visualizations</li> <li><strong>Plugin System</strong>: Dynamic loading of custom components with security validation</li> <li><strong>Text Processing</strong>: Text wrapping with word boundary preservation</li> <li><strong>Content Streaming</strong>: Auto-scroll to bottom for log files and streaming output</li></ul> <h3>Variable & Template System</h3> <ul><li><strong>Hierarchical Variables</strong>: Environment, application, layout, and box-level variable support</li> <li><strong>Template Substitution</strong>: Dynamic content generation using variable substitution</li> <li><strong>Environment Integration</strong>: Seamless integration with system environment variables</li> <li><strong>Context-aware Resolution</strong>: Intelligent variable precedence resolution</li></ul> <h2>Testing & Quality Assurance</h2> <h3>Test Coverage</h3> <ul><li><strong>Unit Tests</strong>: 437+ tests covering framework components with 99.8% success rate</li> <li><strong>Integration Tests</strong>: End-to-end application testing with real-world scenarios</li> <li><strong>PTY Tests</strong>: Testing for pseudo-terminal functionality</li> <li><strong>Socket API Tests</strong>: Validation of remote control operations</li> <li><strong>Performance Tests</strong>: Benchmarking and optimization validation</li></ul> <h3>Development Features</h3> <ul><li><strong>Hot Reload</strong>: Live reloading of configuration changes during development</li> <li><strong>Debug Logging</strong>: Logging system with configurable verbosity levels</li> <li><strong>Error Reporting</strong>: Error context with stack traces and execution breadcrumbs</li> <li><strong>Performance Monitoring</strong>: Built-in metrics collection and analysis tools</li></ul> <h2>Architecture & Performance</h2> <h3>Multi-threaded Architecture</h3> <ul><li><strong>Unified Threading System</strong>: Single ThreadManager coordinating all background operations</li> <li><strong>Message Passing</strong>: Efficient inter-thread communication using structured message system</li> <li><strong>Resource Management</strong>: Proper cleanup and resource leak prevention</li> <li><strong>Thread Safety</strong>: Thread-safe implementation with Arc&lt;Mutex&lt;&gt;&gt; patterns</li></ul> <h3>Performance Optimizations</h3> <ul><li><strong>Efficient Rendering</strong>: Diff-based screen updates minimizing terminal I/O overhead</li> <li><strong>Memory Management</strong>: Circular buffers and bounded storage preventing memory leaks</li> <li><strong>Input Optimization</strong>: Message coalescing and event throttling for responsive interactions</li> <li><strong>Cross-platform Support</strong>: Optimized implementations for macOS, Linux, and Windows</li></ul> <h2>Configuration & Customization</h2> <h3>YAML Schema Features</h3> <ul><li><strong>Type Safety</strong>: JSON schema validation for configuration elements</li> <li><strong>Nested Structures</strong>: Support for nested box hierarchies and relationships</li> <li><strong>Dynamic Updates</strong>: Live synchronization of configuration changes to YAML files</li> <li><strong>Validation Feedback</strong>: Error messages for configuration issues</li> <li><strong>Documentation Integration</strong>: Schema-driven documentation generation</li></ul> <h3>Extensibility</h3> <ul><li><strong>Plugin Architecture</strong>: Dynamic component loading with fallback to mock implementations</li> <li><strong>Custom Components</strong>: Create specialized box types for specific use cases</li> <li><strong>Theme System</strong>: Customizable color schemes and visual styling</li> <li><strong>Layout Templates</strong>: Reusable layout patterns and component libraries</li></ul> <p>BoxMux uses YAML configuration to define terminal UI applications with interactive components and real-time updates.</p>",1);function a(e){var o=s();r(90),n(e,o)}const m=Object.freeze(Object.defineProperty({__proto__:null,default:a,metadata:t},Symbol.toStringTag,{value:"Module"}));export{m as _};
