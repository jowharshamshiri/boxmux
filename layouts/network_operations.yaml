app:
  layouts:
    - id: 'network_operations'
      root: true
      title: 'Network Operations Center'
      # Network theme - blue/cyan dominant
      bg_color: 'black'
      fg_color: 'bright_white'
      selected_fg_color: 'black'
      selected_bg_color: 'bright_cyan'
      border_color: 'bright_cyan'
      selected_border_color: 'bright_blue'
      title_fg_color: 'bright_cyan'
      title_bg_color: 'black'
      children:
        # Network status header
        - id: 'network_header'
          title: 'Network Operations Center - Live Monitoring'
          position:
            x1: "0%"
            y1: "0%"
            x2: "100%"
            y2: "6%"
          border_color: 'bright_cyan'
          bg_color: 'black'
          fg_color: 'bright_cyan'
          refresh_interval: 2000
          script:
            - "hostname_info=$(hostname -f 2>/dev/null || hostname)"
            - "ip_info=$(hostname -I 2>/dev/null | cut -d' ' -f1 || ifconfig | grep 'inet ' | head -1 | awk '{print $2}' | cut -d: -f2 || echo 'N/A')"
            - "echo 'HOST: '$hostname_info' | IP: '$ip_info' | GATEWAY: '$(ip route | grep default | awk '{print $3}' 2>/dev/null || route -n get default 2>/dev/null | grep gateway | awk '{print $2}' || echo 'N/A')' | DNS: '$(cat /etc/resolv.conf 2>/dev/null | grep nameserver | head -1 | awk '{print $2}' || echo 'N/A')"

        # Interface monitoring
        - id: 'interface_monitor'
          title: 'Network Interfaces'
          position:
            x1: "1%"
            y1: "8%"
            x2: "35%"
            y2: "50%"
          border_color: 'blue'
          bg_color: 'black'
          fg_color: 'bright_blue'
          refresh_interval: 3000
          script:
            - "echo 'NETWORK INTERFACES'"
            - "echo '================='"
            - "echo ''"
            - "if command -v ip >/dev/null 2>&1; then"
            - "  echo 'Interface Status:'"
            - "  ip link show | grep -E '^[0-9]' | while read line; do"
            - "    iface=$(echo $line | cut -d: -f2 | tr -d ' ')"
            - "    state=$(echo $line | grep -o 'state [A-Z]*' | cut -d' ' -f2)"
            - "    echo \"$iface: $state\""
            - "  done | head -8"
            - "  echo ''"
            - "  echo 'IP Addresses:'"
            - "  ip addr show | grep 'inet ' | grep -v '127.0.0.1' | while read line; do"
            - "    ip=$(echo $line | awk '{print $2}')"
            - "    iface=$(ip addr show | grep -B2 \"$line\" | grep '^[0-9]' | tail -1 | cut -d: -f2 | tr -d ' ')"
            - "    echo \"$iface: $ip\""
            - "  done | head -5"
            - "else"
            - "  echo 'Interface Status (ifconfig):'"
            - "  ifconfig | grep -E '^[a-z]|inet ' | head -10"
            - "fi"
            - "echo ''"
            - "echo 'Traffic Statistics:'"
            - "if command -v vnstat >/dev/null 2>&1; then"
            - "  vnstat -i $(ip route | grep default | awk '{print $5}' 2>/dev/null || echo eth0) --oneline 2>/dev/null | head -1"
            - "else"
            - "  echo 'Install vnstat for traffic statistics'"
            - "fi"

        # Connection monitoring
        - id: 'connection_monitor'
          title: 'Active Connections'
          position:
            x1: "37%"
            y1: "8%"
            x2: "70%"
            y2: "50%"
          border_color: 'green'
          bg_color: 'black'
          fg_color: 'bright_green'
          refresh_interval: 2000
          script:
            - "echo 'ACTIVE CONNECTIONS'"
            - "echo '================='"
            - "echo ''"
            - "if command -v ss >/dev/null 2>&1; then"
            - "  echo 'Connection Summary:'"
            - "  ss -s | head -5"
            - "  echo ''"
            - "  echo 'Listening Ports:'"
            - "  ss -tlnp | grep LISTEN | awk '{print $4}' | cut -d: -f2 | sort -n | uniq | head -10 | tr '\\n' ' '"
            - "  echo ''"
            - "  echo ''"
            - "  echo 'Established Connections:'"
            - "  ss -tunp | grep ESTAB | head -8 | awk '{print $1 \" \" $5}'"
            - "else"
            - "  echo 'Connection Summary (netstat):'"
            - "  netstat -s 2>/dev/null | grep -E 'connections|packets' | head -5"
            - "  echo ''"
            - "  echo 'Listening Ports:'"
            - "  netstat -tln 2>/dev/null | grep LISTEN | awk '{print $4}' | cut -d: -f2 | sort -n | uniq | head -10 | tr '\\n' ' '"
            - "  echo ''"
            - "  echo ''"
            - "  echo 'Established Connections:'"
            - "  netstat -tn 2>/dev/null | grep ESTABLISHED | head -8 | awk '{print $1 \" \" $5}'"
            - "fi"

        # Network tools
        - id: 'network_tools'
          title: 'Network Tools'
          position:
            x1: "72%"
            y1: "8%"
            x2: "99%"
            y2: "50%"
          tab_order: 1
          border_color: 'yellow'
          choices:
            - id: 'connectivity_test'
              content: 'Connectivity'
              script:
                - "echo 'CONNECTIVITY TEST'"
                - "echo '================'"
                - "echo ''"
                - "echo 'Testing external connectivity...'"
                - "echo ''"
                - "# Test Google DNS"
                - "if ping -c 1 -W 2 8.8.8.8 >/dev/null 2>&1; then"
                - "  echo '✓ Google DNS (8.8.8.8): REACHABLE'"
                - "else"
                - "  echo '✗ Google DNS (8.8.8.8): UNREACHABLE'"
                - "fi"
                - "# Test Cloudflare DNS"
                - "if ping -c 1 -W 2 1.1.1.1 >/dev/null 2>&1; then"
                - "  echo '✓ Cloudflare DNS (1.1.1.1): REACHABLE'"
                - "else"
                - "  echo '✗ Cloudflare DNS (1.1.1.1): UNREACHABLE'"
                - "fi"
                - "# Test domain resolution"
                - "if ping -c 1 -W 2 google.com >/dev/null 2>&1; then"
                - "  echo '✓ Google.com: REACHABLE'"
                - "else"
                - "  echo '✗ Google.com: UNREACHABLE'"
                - "fi"
                - "if ping -c 1 -W 2 github.com >/dev/null 2>&1; then"
                - "  echo '✓ GitHub.com: REACHABLE'"
                - "else"
                - "  echo '✗ GitHub.com: UNREACHABLE'"
                - "fi"
                - "echo ''"
                - "echo 'Gateway Test:'"
                - "gateway=$(ip route | grep default | awk '{print $3}' 2>/dev/null || route -n get default 2>/dev/null | grep gateway | awk '{print $2}')"
                - "if [ ! -z \"$gateway\" ]; then"
                - "  if ping -c 1 -W 2 $gateway >/dev/null 2>&1; then"
                - "    echo \"✓ Gateway ($gateway): REACHABLE\""
                - "  else"
                - "    echo \"✗ Gateway ($gateway): UNREACHABLE\""
                - "  fi"
                - "else"
                - "  echo '✗ Gateway: NOT FOUND'"
                - "fi"
              redirect_output: 'tools_output'
            - id: 'dns_lookup'
              content: 'DNS Lookup'
              script:
                - "echo 'DNS LOOKUP TOOLS'"
                - "echo '==============='"
                - "echo ''"
                - "echo 'DNS Configuration:'"
                - "cat /etc/resolv.conf 2>/dev/null | grep nameserver | head -3"
                - "echo ''"
                - "echo 'DNS Resolution Tests:'"
                - "for domain in google.com github.com cloudflare.com; do"
                - "  echo \"Resolving $domain:\""
                - "  if command -v nslookup >/dev/null 2>&1; then"
                - "    nslookup $domain 2>/dev/null | grep -A1 'Non-authoritative answer:' | grep Address | head -2"
                - "  elif command -v dig >/dev/null 2>&1; then"
                - "    dig +short $domain | head -2"
                - "  else"
                - "    getent hosts $domain 2>/dev/null | head -1"
                - "  fi"
                - "  echo ''"
                - "done"
                - "echo 'Reverse DNS (local IP):'"
                - "local_ip=$(hostname -I 2>/dev/null | cut -d' ' -f1)"
                - "if [ ! -z \"$local_ip\" ]; then"
                - "  if command -v nslookup >/dev/null 2>&1; then"
                - "    nslookup $local_ip 2>/dev/null | grep 'name =' | head -1"
                - "  else"
                - "    echo \"Local IP: $local_ip\""
                - "  fi"
                - "fi"
              redirect_output: 'tools_output'
            - id: 'port_scan'
              content: 'Port Scan'
              script:
                - "echo 'PORT SCANNING'"
                - "echo '============='"
                - "echo ''"
                - "echo 'Scanning common ports on localhost...'"
                - "echo ''"
                - "common_ports=\"22 23 25 53 80 110 143 443 993 995 3306 5432 6379 27017\""
                - "for port in $common_ports; do"
                - "  if command -v nc >/dev/null 2>&1; then"
                - "    if nc -z localhost $port 2>/dev/null; then"
                - "      echo \"Port $port: OPEN\""
                - "    fi"
                - "  elif command -v telnet >/dev/null 2>&1; then"
                - "    if timeout 1 telnet localhost $port 2>/dev/null | grep Connected >/dev/null; then"
                - "      echo \"Port $port: OPEN\""
                - "    fi"
                - "  else"
                - "    # Use /dev/tcp if available (bash)"
                - "    if timeout 1 bash -c \"echo >/dev/tcp/localhost/$port\" 2>/dev/null; then"
                - "      echo \"Port $port: OPEN\""
                - "    fi"
                - "  fi"
                - "done"
                - "echo ''"
                - "echo 'Services on open ports:'"
                - "if command -v ss >/dev/null 2>&1; then"
                - "  ss -tlnp | grep LISTEN | head -8"
                - "else"
                - "  netstat -tlnp 2>/dev/null | grep LISTEN | head -8"
                - "fi"
              redirect_output: 'tools_output'
            - id: 'traceroute'
              content: 'Traceroute'
              script:
                - "echo 'NETWORK TRACEROUTE'"
                - "echo '================='"
                - "echo ''"
                - "echo 'Tracing route to google.com...'"
                - "if command -v traceroute >/dev/null 2>&1; then"
                - "  traceroute -n -m 10 google.com 2>/dev/null | head -10"
                - "elif command -v tracert >/dev/null 2>&1; then"
                - "  tracert -h 10 google.com 2>/dev/null | head -10"
                - "else"
                - "  echo 'Traceroute not available'"
                - "  echo 'Route to default gateway:'"
                - "  ip route 2>/dev/null | head -5 || route -n 2>/dev/null | head -5"
                - "fi"
                - "echo ''"
                - "echo 'Routing Table:'"
                - "if command -v ip >/dev/null 2>&1; then"
                - "  ip route | head -8"
                - "else"
                - "  route -n 2>/dev/null | head -8"
                - "fi"
              redirect_output: 'tools_output'

        # Security monitoring
        - id: 'security_monitor'
          title: 'Network Security'
          position:
            x1: "1%"
            y1: "52%"
            x2: "50%"
            y2: "95%"
          border_color: 'red'
          bg_color: 'black'
          fg_color: 'bright_red'
          refresh_interval: 5000
          script:
            - "echo 'NETWORK SECURITY STATUS'"
            - "echo '======================'"
            - "echo ''"
            - "echo 'Firewall Status:'"
            - "if command -v ufw >/dev/null 2>&1; then"
            - "  ufw status 2>/dev/null | head -5"
            - "elif command -v iptables >/dev/null 2>&1; then"
            - "  echo 'iptables rules: '$(iptables -L 2>/dev/null | wc -l)' lines'"
            - "elif command -v pfctl >/dev/null 2>&1; then"
            - "  pfctl -s info 2>/dev/null | head -3"
            - "else"
            - "  echo 'No firewall detected or access denied'"
            - "fi"
            - "echo ''"
            - "echo 'SSH Security:'"
            - "if [ -f /etc/ssh/sshd_config ]; then"
            - "  echo 'SSH Config found'"
            - "  grep -E '^Port|^PermitRootLogin|^PasswordAuthentication' /etc/ssh/sshd_config 2>/dev/null | head -3"
            - "else"
            - "  echo 'SSH config not accessible'"
            - "fi"
            - "echo 'Active SSH sessions: '$(who | wc -l)"
            - "echo ''"
            - "echo 'Network Security Events:'"
            - "if [ -f /var/log/auth.log ]; then"
            - "  echo 'Recent auth events:'"
            - "  tail -10 /var/log/auth.log 2>/dev/null | grep -i 'failed\\|invalid\\|break' | tail -3"
            - "elif command -v journalctl >/dev/null 2>&1; then"
            - "  echo 'Recent auth events:'"
            - "  journalctl -u ssh --no-pager -n 5 2>/dev/null | tail -3"
            - "else"
            - "  echo 'Auth logs not accessible'"
            - "fi"
            - "echo ''"
            - "echo 'Open Ports Summary:'"
            - "if command -v ss >/dev/null 2>&1; then"
            - "  ss -tlnp | grep LISTEN | wc -l | xargs echo 'Listening services:'"
            - "else"
            - "  netstat -tln 2>/dev/null | grep LISTEN | wc -l | xargs echo 'Listening services:'"
            - "fi"

        # Tools output
        - id: 'tools_output'
          title: 'Network Tools Output'
          position:
            x1: "52%"
            y1: "52%"
            x2: "99%"
            y2: "95%"
          border_color: 'magenta'
          bg_color: 'black'
          fg_color: 'bright_magenta'
          content: "Network Operations Center\\n\\nUse Network Tools box to:\\n\\n• Test connectivity to external hosts\\n• Perform DNS lookups and resolution\\n• Scan for open ports on localhost\\n• Trace network routes\\n\\nOutput from network tools will appear here\\n\\nMonitoring:\\n• Network interfaces and IP addresses\\n• Active connections and listening ports\\n• Security status and firewall rules\\n• Real-time network statistics"