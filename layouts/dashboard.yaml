app:
  libs:
    - lib/os_lib.sh
  layouts:
    - id: 'dashboard'
      root: true
      title: 'Advanced Dashboard Layout'
      selected_fg_color: 'bright_yellow'
      bg_color: 'bright_black'
      selected_bg_color: 'bright_black'
      title_fg_color: 'white'
      selected_title_fg_color: 'black'
      title_bg_color: 'black'
      selected_title_bg_color: 'bright_yellow'
      border_color: 'bright_white'
      selected_border_color: 'bright_yellow'
      children:
        - id: 'header'
          title: 'Header'
          position:
            x1: 0%
            y1: 0%
            x2: 100%
            y2: 5%
          children:
            - id: 'title'
              title: 'Dashboard Title'
              position:
                x1: 2%
                y1: 0%
                x2: 30%
                y2: 100%
              script:
                - echo 'My Awesome Dash'
              refresh_interval: 3000
            - id: 'status'
              title: 'Status'
              position:
                x1: 70%
                y1: 0%
                x2: 98%
                y2: 100%
              script:
                - echo 'Status Running'
        - id: 'sidebar'
          title: 'Sidebar'
          position:
            x1: 0%
            y1: 5%
            x2: 20%
            y2: 95%
          children:
            - id: 'menuA'
              position:
                x1: 0%
                y1: 0%
                x2: 90%
                y2: 50%
              tab_order: 1
              on_keypress:
                a:
                  - echo 'Key A pressed'
                b:
                  - echo 'Key B pressed'
              choices:
                - id: 'menuA1'
                  title: 'Menu A1'
                  script:
                    - echo 'Menu A1'
                - id: 'menuA2'
                  title: 'Menu A2'
                  script:
                    - echo 'Menu A2'
                - id: 'menuA3'
                  title: 'Menu A3'
                  script:
                    - echo 'Menu A3'
                - id: 'menuA4'
                  title: 'Menu A4'
                  script:
                    - echo 'Menu A4'
                - id: 'menuA5'
                  title: 'Menu A5'
                  script:
                    - echo 'Menu A5'
        - id: 'content'
          title: 'Content Area'
          position:
            x1: 20%
            y1: 5%
            x2: 100%
            y2: 95%
          children:
            - id: 'top_charts'
              title: 'Top Charts'
              position:
                x1: 0%
                y1: 0%
                x2: 100%
                y2: 50%
              children:
                - id: 'chart1'
                  title: 'CPU Usage'
                  position:
                    x1: 2%
                    y1: 5%
                    x2: 48%
                    y2: 45%
                  tab_order: 16
                  refresh_interval: 1000
                  script:
                    - >
                      echo -e "Time,Value\n1,$((RANDOM % 100 + 100))\n2,$((RANDOM % 100 + 100))\n3,$((RANDOM % 100 + 100))\n4,$((RANDOM % 100 + 100))\n5,$((RANDOM % 100 + 100))" > /tmp/data_line.csv;
                      gnuplot -e "set terminal dumb size 80, 15; set style data lines; set datafile separator ','; plot '/tmp/data_line.csv' using 1:2 title 'CPU Usage' with linespoints; pause -1";
                      rm /tmp/data_line.csv
                - id: 'chart2'
                  title: 'Memory Usage'
                  position:
                    x1: 52%
                    y1: 5%
                    x2: 98%
                    y2: 45%
                  tab_order: 17
                  refresh_interval: 1500
                  script:
                    - >
                      echo -e "Time,Value\n1,$((RANDOM % 100 + 100))\n2,$((RANDOM % 100 + 100))\n3,$((RANDOM % 100 + 100))\n4,$((RANDOM % 100 + 100))\n5,$((RANDOM % 100 + 100))" > /tmp/data_line.csv;
                      gnuplot -e "set terminal dumb size 80, 15; set style data lines; set datafile separator ','; plot '/tmp/data_line.csv' using 1:2 title 'Memory Usage' with linespoints; pause -1";
                      rm /tmp/data_line.csv
                - id: 'chart3'
                  title: 'Network Traffic'
                  position:
                    x1: 2%
                    y1: 50%
                    x2: 48%
                    y2: 90%
                  tab_order: 18
                  refresh_interval: 2000
                  script:
                    - >
                      echo -e "Time,Value\n1,$((RANDOM % 100 + 100))\n2,$((RANDOM % 100 + 100))\n3,$((RANDOM % 100 + 100))\n4,$((RANDOM % 100 + 100))\n5,$((RANDOM % 100 + 100))" > /tmp/data_line.csv;
                      gnuplot -e "set terminal dumb size 80, 15; set style data lines; set datafile separator ','; plot '/tmp/data_line.csv' using 1:2 title 'Network Traffic' with linespoints; pause -1";
                      rm /tmp/data_line.csv
                - id: 'chart4'
                  title: 'Disk I/O'
                  position:
                    x1: 52%
                    y1: 50%
                    x2: 98%
                    y2: 90%
                  tab_order: 19
                  refresh_interval: 2500
                  script:
                    - >
                      echo -e "Time,Value\n1,$((RANDOM % 100 + 100))\n2,$((RANDOM % 100 + 100))\n3,$((RANDOM % 100 + 100))\n4,$((RANDOM % 100 + 100))\n5,$((RANDOM % 100 + 100))" > /tmp/data_line.csv;
                      gnuplot -e "set terminal dumb size 80, 15; set style data lines; set datafile separator ','; plot '/tmp/data_line.csv' using 1:2 title 'Disk I/O' with linespoints; pause -1";
                      rm /tmp/data_line.csv
            - id: 'logs'
              title: 'Logs'
              position:
                x1: 0%
                y1: 50%
                x2: 100%
                y2: 100%
              children:
                - id: 'system_logs'
                  title: 'System Logs'
                  position:
                    x1: 2%
                    y1: 5%
                    x2: 48%
                    y2: 45%
                  script:
                    - log show --predicate 'eventMessage contains "Error"' --info --last 1m
                - id: 'application_logs'
                  title: 'Application Logs'
                  position:
                    x1: 52%
                    y1: 5%
                    x2: 98%
                    y2: 45%
                  script:
                    - tail -n 20 /usr/local/var/log/my_app.log
                - id: 'security_logs'
                  title: 'Security Logs'
                  position:
                    x1: 2%
                    y1: 50%
                    x2: 48%
                    y2: 90%
                  script:
                    - tail -n 20 /var/log/authd.log
                - id: 'custom_logs'
                  title: 'Custom Logs'
                  position:
                    x1: 52%
                    y1: 50%
                    x2: 98%
                    y2: 90%
                  script:
                    - tail -n 20 /path/to/custom.log
        - id: 'footer'
          title: 'Footer'
          position:
            x1: 0%
            y1: 95%
            x2: 100%
            y2: 100%
          script:
            - date
